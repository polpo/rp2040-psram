// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// --------- //
// spi_fudge //
// --------- //

#define spi_fudge_wrap_target 0
#define spi_fudge_wrap 9

static const uint16_t spi_fudge_program_instructions[] = {
            //     .wrap_target
    0x6828, //  0: out    x, 8            side 1     
    0x6848, //  1: out    y, 8            side 1     
    0x0843, //  2: jmp    x--, 3          side 1     
    0x6001, //  3: out    pins, 1         side 0     
    0x1043, //  4: jmp    x--, 3          side 2     
    0x0060, //  5: jmp    !y, 0           side 0     
    0xb042, //  6: nop                    side 2     
    0x0009, //  7: jmp    9               side 0     
    0x4001, //  8: in     pins, 1         side 0     
    0x1088, //  9: jmp    y--, 8          side 2     
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program spi_fudge_program = {
    .instructions = spi_fudge_program_instructions,
    .length = 10,
    .origin = -1,
};

static inline pio_sm_config spi_fudge_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + spi_fudge_wrap_target, offset + spi_fudge_wrap);
    sm_config_set_sideset(&c, 2, false, false);
    return c;
}

#include "hardware/gpio.h"
static inline void pio_spi_fudge_cs_init(PIO pio, uint sm, uint prog_offs, uint n_bits, float clkdiv, uint pin_cs, uint pin_mosi, uint pin_miso) {
    pio_sm_config c = spi_fudge_program_get_default_config(prog_offs);
    sm_config_set_out_pins(&c, pin_mosi, 1);
    sm_config_set_in_pins(&c, pin_miso);
    sm_config_set_sideset_pins(&c, pin_cs);
    sm_config_set_out_shift(&c, false, true, n_bits);
    sm_config_set_in_shift(&c, false, true, n_bits);
    sm_config_set_clkdiv(&c, clkdiv);
    pio_sm_set_consecutive_pindirs(pio, sm, pin_cs, 2, true);
    pio_sm_set_consecutive_pindirs(pio, sm, pin_mosi, 1, true);
    pio_sm_set_consecutive_pindirs(pio, sm, pin_miso, 1, false);
    pio_gpio_init(pio, pin_mosi);
    pio_gpio_init(pio, pin_cs);
    pio_gpio_init(pio, pin_cs + 1);
    hw_set_bits(&pio->input_sync_bypass, 1u << pin_miso);
    pio_sm_init(pio, sm, prog_offs, &c);
    pio_sm_set_enabled(pio, sm, true);
}

#endif

// ---------- //
// qspi_psram //
// ---------- //

#define qspi_psram_wrap_target 0
#define qspi_psram_wrap 10

static const uint16_t qspi_psram_program_instructions[] = {
            //     .wrap_target
    0x6828, //  0: out    x, 8            side 1     
    0x6848, //  1: out    y, 8            side 1     
    0x0843, //  2: jmp    x--, 3          side 1     
    0x6004, //  3: out    pins, 4         side 0     
    0x1043, //  4: jmp    x--, 3          side 2     
    0x0060, //  5: jmp    !y, 0           side 0     
    0xf080, //  6: set    pindirs, 0      side 2     
    0xa042, //  7: nop                    side 0     
    0x5004, //  8: in     pins, 4         side 2     
    0x0088, //  9: jmp    y--, 8          side 0     
    0xe88f, // 10: set    pindirs, 15     side 1     
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program qspi_psram_program = {
    .instructions = qspi_psram_program_instructions,
    .length = 11,
    .origin = -1,
};

static inline pio_sm_config qspi_psram_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + qspi_psram_wrap_target, offset + qspi_psram_wrap);
    sm_config_set_sideset(&c, 2, false, false);
    return c;
}

#include "hardware/gpio.h"
static inline void pio_qspi_psram_cs_init(PIO pio, uint sm, uint prog_offs, uint n_bits, float clkdiv, uint pin_cs, uint pin_sio0) {
    pio_sm_config c = qspi_psram_program_get_default_config(prog_offs);
    sm_config_set_out_pins(&c, pin_sio0, 4);
    sm_config_set_in_pins(&c, pin_sio0);
    sm_config_set_set_pins(&c, pin_sio0, 4);
    sm_config_set_sideset_pins(&c, pin_cs);
    sm_config_set_out_shift(&c, false, true, n_bits);
    sm_config_set_in_shift(&c, false, true, n_bits);
    sm_config_set_clkdiv(&c, clkdiv);
    pio_sm_set_consecutive_pindirs(pio, sm, pin_cs, 2, true);
    pio_sm_set_consecutive_pindirs(pio, sm, pin_sio0, 4, true);
    pio_gpio_init(pio, pin_sio0);
    pio_gpio_init(pio, pin_sio0 + 1);
    pio_gpio_init(pio, pin_sio0 + 2);
    pio_gpio_init(pio, pin_sio0 + 3);
    pio_gpio_init(pio, pin_cs);
    pio_gpio_init(pio, pin_cs + 1);
    hw_set_bits(&pio->input_sync_bypass, 0xfu << pin_sio0);
    pio_sm_init(pio, sm, prog_offs, &c);
    pio_sm_set_enabled(pio, sm, true);
}

#endif

